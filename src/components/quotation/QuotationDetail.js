import React, { useEffect, useState } from "react";
import {
    Autocomplete,
    Box,
    Button,
    Checkbox,
    Container,
    Divider,
    FormControl,
    FormControlLabel,
    FormGroup,
    Grid,
    InputAdornment,
    InputLabel,
    MenuItem,
    Paper,
    Select,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    TextField,
    Typography,
    useMediaQuery,
} from "@mui/material";
import theme from "../../theme/theme";
import { Link, useLocation, useNavigate } from "react-router-dom";
import EmailIcon from "@mui/icons-material/Email";
import PasswordIcon from "@mui/icons-material/Password";
import {
    ShowConfirm,
    ShowError,
    ShowInfo,
    ShowSuccess,
    ShowWarning,
} from "../sweetalert/sweetalert";
import Logo from "../../theme/img/logoPanda.jpg";
import {
    createUserWithEmailAndPassword,
    signInWithEmailAndPassword,
    signInWithPopup,
    signOut,
} from "firebase/auth";
import { DatePicker, LocalizationProvider } from "@mui/x-date-pickers";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import MeetingRoomIcon from '@mui/icons-material/MeetingRoom';
import KeyboardDoubleArrowRightIcon from '@mui/icons-material/KeyboardDoubleArrowRight';
import ReplyAllIcon from '@mui/icons-material/ReplyAll';
import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';
import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';
import dayjs from 'dayjs';
import Cookies from 'js-cookie';
import 'dayjs/locale/th';
import { database } from "../../server/firebase";
import { TableCellB7, TableCellB95, TableCellE20, TableCellG91, TableCellG95, TablecellSelling, TableCellPWD } from "../../theme/style";
import { useData } from "../../server/path";
import { useBasicData } from "../../server/provider/BasicDataProvider";
import { useTripData } from "../../server/provider/TripProvider";
import { formatThaiFull, formatThaiSlash } from "../../theme/DateTH";

const QuotationDetail = ({ setOpen }) => {
    const navigate = useNavigate();

    const items = [
        `‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô CALTEX ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏≤‡∏ê‡∏≤‡∏ô ‡∏ô‡∏ô 0.80 ‡∏Å‡∏Å./‡∏•‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏°‡πÅ‡∏õ‡πâ‡∏ô‡∏£‡∏ñ‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ö COA ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏ô‡∏ô.‡∏ó‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏∞‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö`,
        `‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô ‡∏ö‡∏≤‡∏á‡∏à‡∏≤‡∏Å ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏≤‡∏ê‡∏≤‡∏ô ‡∏ô‡∏ô 0.80 ‡∏Å‡∏Å./‡∏•‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏°‡πÅ‡∏õ‡πâ‡∏ô‡∏£‡∏ñ‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ö COA ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏ô‡∏ô.‡∏ó‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏∞‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö`,
        `‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏ï‡∏£‡∏≤‡∏ê‡∏≤‡∏ô‡∏™‡πà‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ö COA`,
    ];

    const { company, customerbigtruck, customersmalltruck, officers, quotation } = useBasicData();
    const { banks } = useTripData();
    const companyDetail = Object.values(company || {});
    const customerB = Object.values(customerbigtruck || {});
    const customerS = Object.values(customersmalltruck || {});
    const employees = Object.values(officers || {});
    const bankDetail = Object.values(banks || {});
    const quotations = Object.values(quotation || {});

    const [companies, setCompanies] = useState(null);
    const [employee, setEmployee] = useState(null);
    const [customer, setCustomer] = useState(null);
    const [isBangchak, setIsBangchak] = useState("");
    const [note, setNote] = useState("");
    const [check, setCheck] = useState(true);
    const [selectedDate, setSelectedDate] = useState(dayjs(new Date));
    const [selectedDateDelivery, setSelectedDateDelivery] = useState(dayjs(new Date));
    const [selectedIndex, setSelectedIndex] = React.useState(0);

    const handleSelect = (index) => {
        setSelectedIndex(index === selectedIndex ? null : index); // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡πâ‡∏≤‡∏á (optional)
    };

    const handleKeyDown = (e, index) => {
        if (e.key === "Enter" || e.key === " ") {
            e.preventDefault();
            handleSelect(index);
        }
    };

    const productColors = {
        G91: "#c7f4a3ff",   // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô
        G95: "#f3de8aff",   // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô
        B7: "#ffffc2ff",    // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏à‡∏≤‡∏á
        B95: "#ddf2f6ff",   // ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
        E20: "#e8e1c2ff",   // ‡∏Ñ‡∏£‡∏µ‡∏°‡∏≠‡πà‡∏≠‡∏ô
        PWD: "#fdb4f0ff",   // ‡∏ä‡∏°‡∏û‡∏π‡∏≠‡πà‡∏≠‡∏ô
    };

    const productColorsHead = {
        G95: "#FFC000",   // ‡πÅ‡∏Å‡πä‡∏™‡πÇ‡∏ã‡∏Æ‡∏≠‡∏•‡πå 95
        B95: "#B7DEE8",   // ‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô 95
        B7: "#FFFF99",    // ‡∏î‡∏µ‡πÄ‡∏ã‡∏• B7
        G91: "#92D050",   // ‡πÅ‡∏Å‡πä‡∏™‡πÇ‡∏ã‡∏Æ‡∏≠‡∏•‡πå 91
        E20: "#C4BD97",   // ‡πÅ‡∏Å‡πä‡∏™‡πÇ‡∏ã‡∏Æ‡∏≠‡∏•‡πå E20
        PWD: "#F141D8",   // ‡∏î‡∏µ‡πÄ‡∏ã‡∏•‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°
    };

    const products = [
        { code: "G95", name: "‡πÅ‡∏Å‡πä‡∏™‡πÇ‡∏ã‡∏Æ‡∏≠‡∏•‡πå 95" },
        { code: "B95", name: "‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô 95" },
        { code: "B7", name: "‡∏î‡∏µ‡πÄ‡∏ã‡∏• B7" },
        { code: "G91", name: "‡πÅ‡∏Å‡πä‡∏™‡πÇ‡∏ã‡∏Æ‡∏≠‡∏•‡πå 91" },
        { code: "E20", name: "‡πÅ‡∏Å‡πä‡∏™‡πÇ‡∏ã‡∏Æ‡∏≠‡∏•‡πå E20" },
        { code: "PWD", name: "‡∏î‡∏µ‡πÄ‡∏ã‡∏•‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏° (Premium Diesel)" },
    ];

    // üß† ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å products
    const initialFuelData = Object.fromEntries(
        products.map(({ code }) => [
            code,
            { Volume: "", RateOil: "" },
        ])
    );

    const [fuelData, setFuelData] = useState(initialFuelData);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á ‡πÜ
    const getFilledFuelData = (data) => {
        return Object.fromEntries(
            Object.entries(data).filter(([code, { Volume, RateOil }]) =>
                (Volume !== "" && Number(Volume) !== 0) ||
                (RateOil !== "" && Number(RateOil) !== 0)
            )
        );
    };

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å
    console.log("fuelData:", getFilledFuelData(fuelData));
    console.log("company : ", companies);

    const handleChange = (type, field, value) => {
        setFuelData((prev) => ({
            ...prev,
            [type]: {
                ...prev[type],
                [field]: value === "" || Number(value) === 0 ? "" : Number(value)
            },
        }));
    };

    const handleSave = () => {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á object Product ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ != 0
        const Product = Object.entries(fuelData).reduce((acc, [key, val]) => {
            const { Volume, RateOil } = val;
            if (Volume > 0 || RateOil > 0) {
                const Amount = Volume * RateOil;
                acc[key] = { Volume, RateOil, Amount };
            }
            return acc;
        }, {});

        console.log({ Product });
        alert(JSON.stringify({ Product }, null, 2));
    };

    const handleDateChangeDate = (newValue) => {
        if (newValue) {
            const formattedDate = dayjs(newValue); // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï
            setSelectedDate(formattedDate);
        }
    };

    const handleDateChangeDateDelivery = (newValue) => {
        if (newValue) {
            const formattedDate = dayjs(newValue); // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï
            setSelectedDateDelivery(formattedDate);
        }
    };

    const exportToPDF = () => {
        // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô
        if (!companies?.id || !customer?.id || !employee?.id) {
            ShowWarning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó / ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ / ‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
            return;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö fuelData ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ Volume ‡πÅ‡∏•‡∏∞ RateOil ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ï‡∏±‡∏ß
        const hasFuelData = Object.values(fuelData).some(
            (p) => p.Volume && p.RateOil
        );
        if (!hasFuelData) {
            ShowWarning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì/‡∏£‡∏≤‡∏Ñ‡∏≤) ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");
            return;
        }

        if (!selectedDate) {
            ShowWarning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤");
            return;
        }

        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà
        const date = dayjs(new Date());
        const buddhistYear = date.year() + 543;
        const prefix = `${String(buddhistYear).slice(2)}${date.format("MM")}`;

        const sameMonth = Object.values(quotation).filter(
            (q) => q.Code?.startsWith(prefix)
        );

        const lastNo =
            sameMonth.length > 0
                ? Math.max(...sameMonth.map((q) => Number(q.Code.split("/")[1]) || 0))
                : 0;

        const newCode = `${prefix}/${String(lastNo + 1).padStart(3, "0")}`;

        // üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firebase
        database
            .ref("quotation/")
            .child(quotations.length)
            .update({
                id: quotations.length,
                Code: newCode,
                DateStart: dayjs(new Date).format("DD/MM/YYYY"),
                Date: dayjs(selectedDate, "DD/MM/YYYY").format("DD/MM/YYYY"),
                DateDelivery: dayjs(selectedDateDelivery, "DD/MM/YYYY").format("DD/MM/YYYY"),
                Company: `${companies?.id}:${companies?.Name}`,
                Customer: `${customer?.id}:${customer?.Name}`,
                Employee: `${employee?.id}:${employee?.Name}`,
                Product: getFilledFuelData(fuelData),
                selectedIndex: selectedIndex,
                Truck: check ? "‡∏£‡∏ñ‡πÉ‡∏´‡∏ç‡πà" : "‡∏£‡∏ñ‡πÄ‡∏•‡πá‡∏Å",
                Note: note,
                Status: "‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
            })
            .then(() => {
                console.log("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ");

                // üîπ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå
                const invoiceData = {
                    Code: newCode,
                    DateB: dayjs(selectedDate, "DD/MM/YYYY"),
                    DateD: dayjs(selectedDateDelivery, "DD/MM/YYYY"),
                    Company: companies,
                    Customer: customer,
                    Employee: employee,
                    Product: getFilledFuelData(fuelData),
                    Products: products,
                    Note: note,
                    items: items[selectedIndex] || "",
                };

                sessionStorage.setItem("invoiceData", JSON.stringify(invoiceData));

                // üîπ ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
                const screenWidth = window.screen.width;
                const screenHeight = window.screen.height;
                const windowWidth = 900;
                const windowHeight = 600;
                const left = (screenWidth - windowWidth) / 2;
                const top = (screenHeight - windowHeight) / 2;

                const printWindow = window.open(
                    "/print-quotation",
                    "_blank",
                    `width=${windowWidth},height=${windowHeight},left=${left},top=${top}`
                );

                if (!printWindow) {
                    alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏¥‡∏î pop-up blocker ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
                }
            })
            .catch((error) => {
                ShowError("‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
                console.error("Error updating data:", error);
            });
    };

    return (
        <React.Fragment>
            <Grid container spacing={2} marginTop={1}>
                {/* <Grid item xs={12}>
                            <Typography variant="subtitle1" fontWeight="bold" sx={{ marginTop: -2, marginBottom: -1 }} gutterBottom>‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</Typography>
                        </Grid> */}
                <Grid item xs={8} textAlign="left">
                    <Typography variant="h6" fontWeight="bold" gutterBottom>‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</Typography>
                    <Divider />
                </Grid>
                <Grid item xs={4} textAlign="right">
                    <Button variant="contained" color="warning" onClick={() => setOpen(false)} endIcon={<KeyboardDoubleArrowRightIcon />} >‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏ß‡∏≤‡∏á‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</Button>
                </Grid>
                <Grid item xs={4}>
                    <LocalizationProvider dateAdapter={AdapterDayjs}>
                        <Paper>
                            <DatePicker
                                openTo="day"
                                views={["year", "month", "day"]}
                                value={selectedDate ? dayjs(selectedDate, "DD/MM/YYYY") : null}
                                format="DD/MM/YYYY" // <-- ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà MUI ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
                                onChange={handleDateChangeDate}
                                slotProps={{
                                    textField: {
                                        size: "small",
                                        fullWidth: true,
                                        inputProps: {
                                            value: formatThaiFull(selectedDate), // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡πÅ‡∏ö‡∏ö "1 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° ‡∏û.‡∏®.2568"
                                            readOnly: true, // ‚úÖ ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ format ‡πÅ‡∏ö‡∏ö custom
                                        },
                                        InputProps: {
                                            startAdornment: (
                                                <InputAdornment position="start">
                                                    <b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ :</b>
                                                </InputAdornment>
                                            ),
                                            sx: {
                                                fontSize: "15px",
                                                height: "40px",
                                                padding: "10px",
                                                fontWeight: "bold",
                                            },
                                        },
                                    },
                                }}
                            />
                        </Paper>
                    </LocalizationProvider>
                </Grid>
                <Grid item xs={4}>
                    <LocalizationProvider dateAdapter={AdapterDayjs}>
                        <Paper>
                            <DatePicker
                                openTo="day"
                                views={["year", "month", "day"]}
                                value={selectedDateDelivery ? dayjs(selectedDateDelivery, "DD/MM/YYYY") : null}
                                format="DD/MM/YYYY" // <-- ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà MUI ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
                                onChange={handleDateChangeDateDelivery}
                                slotProps={{
                                    textField: {
                                        size: "small",
                                        fullWidth: true,
                                        inputProps: {
                                            value: formatThaiFull(selectedDateDelivery), // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡πÅ‡∏ö‡∏ö "1 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° ‡∏û.‡∏®.2568"
                                            readOnly: true, // ‚úÖ ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ format ‡πÅ‡∏ö‡∏ö custom
                                        },
                                        InputProps: {
                                            startAdornment: (
                                                <InputAdornment position="start">
                                                    <b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á :</b>
                                                </InputAdornment>
                                            ),
                                            sx: {
                                                fontSize: "15px",
                                                height: "40px",
                                                padding: "10px",
                                                fontWeight: "bold",
                                            },
                                        },
                                    },
                                }}
                            />
                        </Paper>
                    </LocalizationProvider>
                </Grid>
                <Grid item xs={4}>
                    <FormGroup row >
                        <Typography variant="subtitle1" fontWeight="bold" sx={{ marginTop: 1, marginRight: 2 }} gutterBottom>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ñ : </Typography>
                        <FormControlLabel control={<Checkbox checked={check ? true : false} />} onChange={() => setCheck(true)} label="‡∏£‡∏ñ‡πÉ‡∏´‡∏ç‡πà" />
                        <FormControlLabel control={<Checkbox checked={!check ? true : false} />} onChange={() => setCheck(false)} label="‡∏£‡∏ñ‡πÄ‡∏•‡πá‡∏Å" />
                    </FormGroup>
                </Grid>
                {/* <Grid item xs={4} textAlign="right">
                    <Button variant="contained" color="warning" onClick={() => setOpen(false)} endIcon={<KeyboardDoubleArrowRightIcon />} >‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏ß‡∏≤‡∏á‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</Button>
                </Grid> */}
                <Grid item xs={6}>
                    <Paper sx={{ width: "100%" }}>
                        <Autocomplete
                            options={companyDetail.filter((row) => row.id !== 1)}
                            getOptionLabel={(option) => option.Name}
                            isOptionEqualToValue={(option, value) => option.id === value.id}
                            value={companies}
                            onChange={(event, newValue) => {
                                setCompanies(newValue);
                                const companyName = newValue.Name?.trim() || "";
                                const isBangchak = companyName.includes("‡∏ô‡∏≤‡∏Ñ‡∏£‡∏≤ ‡∏õ‡∏¥‡πÇ‡∏ï‡∏£‡πÄ‡∏•‡∏µ‡∏¢‡∏° 2016");
                                setIsBangchak(isBangchak)
                            }}
                            renderInput={(params) => (
                                <TextField
                                    {...params}
                                    variant="outlined"
                                    size="small"
                                    sx={{
                                        "& .MuiOutlinedInput-root": { height: "40px" },
                                        "& .MuiInputBase-input": { fontSize: "15px", padding: "2px 6px" },
                                    }}
                                    InputProps={{
                                        ...params.InputProps,
                                        startAdornment: (
                                            <InputAdornment position="start" sx={{ marginRight: 2 }}>
                                                <b>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó :</b>
                                            </InputAdornment>
                                        ),
                                        sx: {
                                            fontSize: "15px",
                                            height: "40px",
                                            padding: "10px",
                                            fontWeight: "bold",
                                        },
                                    }}
                                />
                            )}
                            renderOption={(props, option) => (
                                <li {...props}>
                                    <Typography fontSize="15px">{option.Name}</Typography>
                                </li>
                            )}
                        />
                    </Paper>
                </Grid>
                <Grid item xs={6}>
                    <Paper sx={{ width: "100%" }}>
                        {
                            check ?
                                <Autocomplete
                                    options={customerB}
                                    getOptionLabel={(option) => option.Name}
                                    isOptionEqualToValue={(option, value) => option.id === value.id}
                                    value={customer}
                                    onChange={(event, newValue) => setCustomer(newValue)}
                                    renderInput={(params) => (
                                        <TextField
                                            {...params}
                                            variant="outlined"
                                            size="small"
                                            sx={{
                                                "& .MuiOutlinedInput-root": { height: "40px" },
                                                "& .MuiInputBase-input": { fontSize: "15px", padding: "2px 6px" },
                                            }}
                                            InputProps={{
                                                ...params.InputProps, // ‚úÖ ‡∏£‡∏ß‡∏° props ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á Autocomplete
                                                startAdornment: (
                                                    <InputAdornment position="start" sx={{ marginRight: 2 }}>
                                                        <b>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡∏ç‡πà :</b>
                                                    </InputAdornment>
                                                ),
                                                sx: {
                                                    fontSize: "15px",
                                                    height: "40px",
                                                    padding: "10px",
                                                    fontWeight: "bold",
                                                },
                                            }}
                                        />
                                    )}
                                    renderOption={(props, option) => (
                                        <li {...props}>
                                            <Typography fontSize="15px">{option.Name}</Typography>
                                        </li>
                                    )}
                                />
                                :
                                <Autocomplete
                                    options={customerS}
                                    getOptionLabel={(option) => option.Name}
                                    isOptionEqualToValue={(option, value) => option.id === value.id}
                                    value={customer}
                                    onChange={(event, newValue) => setCustomer(newValue)}
                                    renderInput={(params) => (
                                        <TextField
                                            {...params}
                                            variant="outlined"
                                            size="small"
                                            sx={{
                                                "& .MuiOutlinedInput-root": { height: "40px" },
                                                "& .MuiInputBase-input": { fontSize: "15px", padding: "2px 6px" },
                                            }}
                                            InputProps={{
                                                ...params.InputProps, // ‚úÖ ‡∏£‡∏ß‡∏° props ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á Autocomplete
                                                startAdornment: (
                                                    <InputAdornment position="start" sx={{ marginRight: 2 }}>
                                                        <b>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πá‡∏Å :</b>
                                                    </InputAdornment>
                                                ),
                                                sx: {
                                                    fontSize: "15px",
                                                    height: "40px",
                                                    padding: "10px",
                                                    fontWeight: "bold",
                                                },
                                            }}
                                        />
                                    )}
                                    renderOption={(props, option) => (
                                        <li {...props}>
                                            <Typography fontSize="15px">{option.Name}</Typography>
                                        </li>
                                    )}
                                />
                        }
                    </Paper>
                </Grid>
                <Grid item xs={12}>
                    <TableContainer component={Paper} sx={{ height: "15vh" }}>
                        <Table size="small" sx={{ tableLayout: "fixed", "& .MuiTableCell-root": { padding: "2px" } }}>
                            <TableHead>
                                <TableRow>
                                    {products.map((product) => (
                                        <TableCell
                                            key={product.code}
                                            width={70}
                                            sx={{
                                                textAlign: "center",
                                                height: "35px",
                                                borderBottom: "2px solid lightgray",
                                                fontWeight: "bold",
                                                backgroundColor: productColorsHead[product.code]
                                            }}
                                        >
                                            {`${product.code} (${product.name})`}
                                        </TableCell>
                                    ))}
                                </TableRow>
                            </TableHead>
                            <TableBody>
                                <TableRow>
                                    {Object.entries(fuelData).map(([key, fuel]) => (
                                        <TableCell sx={{ backgroundColor: productColors[key] }} >
                                            <Grid container spacing={1}>
                                                <Grid item xs={5}>
                                                    <Typography variant="subtitle2" sx={{ marginBottom: -1, fontSize: "12px", textAlign: "center", fontWeight: "bold" }} gutterBottom>‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏•‡∏¥‡∏ï‡∏£</Typography>
                                                </Grid>
                                                <Grid item xs={7}>
                                                    <Typography variant="subtitle2" sx={{ marginBottom: -1, fontSize: "12px", textAlign: "center", fontWeight: "bold" }} gutterBottom>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏¥‡∏ï‡∏£</Typography>
                                                </Grid>
                                                <Grid item xs={5}>
                                                    <Paper sx={{ width: "100%" }} >
                                                        <TextField
                                                            size="small"
                                                            type="number"
                                                            fullWidth
                                                            InputLabelProps={{ sx: { fontSize: "14px" } }}
                                                            value={fuel.RateOil}
                                                            onChange={(e) => handleChange(key, "RateOil", e.target.value)}
                                                            sx={{
                                                                '& .MuiOutlinedInput-root': {
                                                                    height: '30px', // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á TextField
                                                                    display: 'flex', // ‡πÉ‡∏ä‡πâ flexbox
                                                                    alignItems: 'center', // ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
                                                                },
                                                                '& .MuiInputBase-input': {
                                                                    fontSize: '14px', // ‡∏Ç‡∏ô‡∏≤‡∏î font ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå
                                                                    fontWeight: 'bold',
                                                                    textAlign: 'left', // ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
                                                                    marginLeft: -0.5,
                                                                    marginRight: -1.5
                                                                },
                                                            }}
                                                        />
                                                    </Paper>
                                                </Grid>
                                                <Grid item xs={7}>
                                                    <Paper sx={{ width: "100%" }} >
                                                        <TextField
                                                            size="small"
                                                            type="number"
                                                            fullWidth
                                                            InputLabelProps={{ sx: { fontSize: "14px" } }}
                                                            value={fuel.Volume}
                                                            onChange={(e) => handleChange(key, "Volume", e.target.value)}
                                                            sx={{
                                                                '& .MuiOutlinedInput-root': {
                                                                    height: '30px', // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á TextField
                                                                    display: 'flex', // ‡πÉ‡∏ä‡πâ flexbox
                                                                    alignItems: 'center', // ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
                                                                },
                                                                '& .MuiInputBase-input': {
                                                                    fontSize: '14px', // ‡∏Ç‡∏ô‡∏≤‡∏î font ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå
                                                                    fontWeight: 'bold',
                                                                    textAlign: 'left', // ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
                                                                    marginLeft: -0.5,
                                                                },
                                                            }}
                                                        />
                                                    </Paper>
                                                </Grid>
                                            </Grid>
                                        </TableCell>
                                    ))}
                                </TableRow>
                            </TableBody>
                        </Table>
                    </TableContainer>
                </Grid>
                {/* <Grid item xs={6}>
                    <Box sx={{ marginLeft: 1 }}>
                        <Typography variant="subtitle1" fontWeight="bold" color="error" gutterBottom>
                            ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏*
                        </Typography>
                        <Typography variant="subtitle2" fontWeight="bold" gutterBottom>
                            ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
                        </Typography>
                        <Box sx={{ display: "flex", alignItems: "center", justifyContent: "left" }}>
                            <Typography variant="subtitle2" fontWeight="bold" gutterBottom>
                                ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠ :
                            </Typography>
                            <Typography variant="subtitle2" sx={{ marginLeft: 2 }} gutterBottom>
                                ‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏≤‡∏ó‡πÑ‡∏ó‡∏¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡∏µ‡πâ‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏©‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
                            </Typography>
                        </Box>
                        <Box sx={{ display: "flex", alignItems: "center", justifyContent: "left" }}>
                            <Typography variant="subtitle2" fontWeight="bold" gutterBottom>
                                ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô :
                            </Typography>
                            <Typography variant="subtitle2" sx={{ marginLeft: 2 }} gutterBottom>
                                {companies ? companies?.Name.split("(")[0] : ""}
                            </Typography>
                        </Box>
                        <Box sx={{ display: "flex", alignItems: "center", justifyContent: "left" }}>
                            <Typography variant="subtitle2" fontWeight="bold" gutterBottom>
                                ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ :
                            </Typography>
                            <Typography variant="subtitle2" sx={{ marginLeft: 2 }} gutterBottom>
                                {isBangchak ? "‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢ 663-100-9768" : "‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢ 633-101-3579"}
                            </Typography>
                        </Box>
                    </Box>
                </Grid> */}
                <Grid item xs={12} sx={{ mb: -2 }}>
                    <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
                        ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
                    </Typography>
                </Grid>
                {items.map((text, idx) => {
                    const selected = idx === selectedIndex;
                    return (
                        <Grid item xs={12} md={4} key={idx}>
                            <Box
                                role="button"
                                tabIndex={0}
                                onClick={() => handleSelect(idx)}
                                onKeyDown={(e) => handleKeyDown(e, idx)}
                                sx={{
                                    p: 2,
                                    borderRadius: 2,
                                    border: selected ? "2px solid" : "1px solid",
                                    borderColor: selected ? theme.palette.panda.main : "divider",
                                    cursor: "pointer",
                                    transition: "box-shadow 0.15s, transform 0.08s",
                                    boxShadow: selected ? 3 : 0,
                                    "&:hover": {
                                        transform: "translateY(-2px)",
                                    },
                                    height: "60px"
                                }}
                            >
                                <Typography variant="subtitle2" gutterBottom component="div"
                                    sx={{
                                        fontWeight: selected ? "bold" : "none",
                                        color: selected ? "black" : "gray"
                                    }}>
                                    {text}
                                </Typography>
                            </Box>
                        </Grid>
                    );
                })}
                <Grid item xs={6}>
                    <TextField
                        size="small"
                        type="text"
                        fullWidth
                        multiline
                        minRows={3}
                        value={note}
                        onChange={(e) => setNote(e.target.value)}
                        InputLabelProps={{ sx: { fontSize: "15px" } }}
                        sx={{
                            '& .MuiOutlinedInput-root': {
                                display: 'flex',
                                alignItems: 'flex-start', // <-- ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å 'top' ‡πÄ‡∏õ‡πá‡∏ô 'flex-start'
                                height: 'auto', // ‡πÉ‡∏´‡πâ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ fix 35px)
                            },
                            '& .MuiInputBase-input': {
                                fontSize: '15px',
                                fontWeight: 'bold',
                                textAlign: 'left', // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö textarea
                            },
                        }}
                        InputProps={{
                            startAdornment: (
                                <InputAdornment position="start">
                                    <b>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° :</b>
                                </InputAdornment>
                            ),
                        }}
                    />
                </Grid>
                <Grid item xs={6}>
                    <Grid container>
                        <Grid item xs={12}>
                            <Autocomplete
                                options={employees}
                                getOptionLabel={(option) => option.Name}
                                isOptionEqualToValue={(option, value) => option.id === value.id}
                                value={employee}
                                onChange={(event, newValue) => setEmployee(newValue)}
                                renderInput={(params) => (
                                    <TextField
                                        {...params}
                                        variant="outlined"
                                        size="small"
                                        sx={{
                                            "& .MuiOutlinedInput-root": { height: "40px" },
                                            "& .MuiInputBase-input": { fontSize: "15px", padding: "2px 6px" },
                                        }}
                                        InputProps={{
                                            ...params.InputProps, // ‚úÖ ‡∏£‡∏ß‡∏° props ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á Autocomplete
                                            startAdornment: (
                                                <InputAdornment position="start" sx={{ marginRight: 2 }}>
                                                    <b>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ :</b>
                                                </InputAdornment>
                                            ),
                                            sx: {
                                                fontSize: "15px",
                                                height: "40px",
                                                padding: "10px",
                                                fontWeight: "bold",
                                            },
                                        }}
                                    />
                                )}
                                renderOption={(props, option) => (
                                    <li {...props}>
                                        <Typography fontSize="15px">{option.Name}</Typography>
                                    </li>
                                )}
                            />
                        </Grid>
                        <Grid item xs={12} textAlign="right">
                            <Button variant="contained" onClick={exportToPDF} sx={{ marginTop: 1 }} >‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</Button>
                        </Grid>
                    </Grid>
                </Grid>
            </Grid>
        </React.Fragment>
    );
};

export default QuotationDetail;
