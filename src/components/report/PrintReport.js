import React, { useEffect, useState } from "react";
import { Typography, Button, Grid, TableHead, TableCell, TableRow, Table, Paper, TableContainer, TableBody } from "@mui/material";
import html2canvas from 'html2canvas';

const PrintReport = () => {
  const [invoiceData, setInvoiceData] = useState(null);

  useEffect(() => {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å sessionStorage
    const storedData = sessionStorage.getItem("invoiceData");

    if (storedData) {
      try {
        setInvoiceData(JSON.parse(storedData));
      } catch (error) {
        console.error("Error parsing invoiceData:", error);
      }
    }
  }, []);

  const formatAddress = (address) => {
    // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å address ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ , ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡πà‡∏á
    const parts = address.split(/,|\s+/).filter(Boolean);

    if (parts.length < 5) return "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";

    const [houseNo, moo, subdistrict, district, province, postalCode] = parts;

    return `${houseNo} ‡∏´‡∏°‡∏π‡πà ${moo} ‡∏ï.${subdistrict} ‡∏≠.${district} ‡∏à.${province} ${postalCode}`;
  };

  const formatTaxID = (taxID) => {
    if (!taxID || taxID === "-") {
      return "-";
    }
    return String(taxID).replace(/(\d{3})(\d{4})(\d{5})(\d{1})/, "$1 $2 $3 $4");
  };

  const formatPhoneNumber = (phone) => {
    if (!phone || phone === "-") {
      return "-";
    }
    return String(phone).replace(/(\d{3})(\d{3})(\d{4})/, "$1-$2-$3");
  };

  const numberToThaiText = (num) => {
    const thaiNumbers = ["‡∏®‡∏π‡∏ô‡∏¢‡πå", "‡∏´‡∏ô‡∏∂‡πà‡∏á", "‡∏™‡∏≠‡∏á", "‡∏™‡∏≤‡∏°", "‡∏™‡∏µ‡πà", "‡∏´‡πâ‡∏≤", "‡∏´‡∏Å", "‡πÄ‡∏à‡πá‡∏î", "‡πÅ‡∏õ‡∏î", "‡πÄ‡∏Å‡πâ‡∏≤"];
    const thaiPlaces = ["", "‡∏™‡∏¥‡∏ö", "‡∏£‡πâ‡∏≠‡∏¢", "‡∏û‡∏±‡∏ô", "‡∏´‡∏°‡∏∑‡πà‡∏ô", "‡πÅ‡∏™‡∏ô", "‡∏•‡πâ‡∏≤‡∏ô"];

    let text = "";
    let numberStr = parseFloat(num).toFixed(2).toString(); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
    let [integerPart, decimalPart] = numberStr.split("."); // ‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡∏∞‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°

    // üü¢ ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
    let intLen = integerPart.length;
    for (let i = 0; i < intLen; i++) {
      let digit = parseInt(integerPart[i]);
      let place = intLen - i - 1;

      if (digit !== 0) {
        if (place === 1 && digit === 1) {
          text += "‡∏™‡∏¥‡∏ö"; // "‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏™‡∏¥‡∏ö" ‚Üí "‡∏™‡∏¥‡∏ö"
        } else if (place === 1 && digit === 2) {
          text += "‡∏¢‡∏µ‡πà‡∏™‡∏¥‡∏ö"; // "‡∏™‡∏≠‡∏á‡∏™‡∏¥‡∏ö" ‚Üí "‡∏¢‡∏µ‡πà‡∏™‡∏¥‡∏ö"
        } else if (place === 0 && digit === 1 && intLen > 1) {
          text += "‡πÄ‡∏≠‡πá‡∏î"; // "‡∏´‡∏ô‡∏∂‡πà‡∏á" ‚Üí "‡πÄ‡∏≠‡πá‡∏î" ‡πÉ‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢
        } else {
          text += thaiNumbers[digit] + thaiPlaces[place];
        }
      }
    }

    text += "‡∏ö‡∏≤‡∏ó"; // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏ó‡∏¢

    // üü¢ ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° (‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå)
    if (decimalPart && decimalPart !== "00") {
      text += " " + thaiNumbers[parseInt(decimalPart[0])] + "‡∏™‡∏¥‡∏ö";
      if (decimalPart[1] !== "0") {
        text += thaiNumbers[parseInt(decimalPart[1])];
      }
      text += "‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå";
    } else {
      text += "‡∏ñ‡πâ‡∏ß‡∏ô";
    }

    return text;
  };

  const handleDownloadImage = () => {
    const content = document.querySelector("#invoiceContent"); // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å div ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û

    // ‡πÉ‡∏ä‡πâ html2canvas ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ HTML ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    html2canvas(content).then((canvas) => {
      // ‡πÅ‡∏õ‡∏•‡∏á canvas ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      const imageUrl = canvas.toDataURL("image/png");

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
      const link = document.createElement('a');
      link.href = imageUrl;
      link.download = 'report.png'; // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
      link.click(); // ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
    });
  };

  const rowSpanMap = invoiceData?.Report.reduce((acc, row) => {
    const key = `${row.Date} : ${row.Driver} : ${row.Registration}`;
    acc[key] = (acc[key] || 0) + 1;
    return acc;
  }, {});

  let mergedCells = {};
  let displayIndex = 0;

  console.log("Tickets Order : ", invoiceData?.Report);
  console.log("Total Order : ", invoiceData?.Total);

  return (
    <React.Fragment>
      <div id="invoiceContent" style={{ padding: "20px" }}>
        <Grid container spacing={2}>
          <Grid item xs={9}>
            {
              invoiceData &&
              (
                <React.Fragment>
                  <Typography variant="h6" fontWeight="bold" sx={{ marginBottom: -1 }} gutterBottom>{invoiceData?.Company}</Typography>
                  <Typography variant="subtitle1" sx={{ marginBottom: -1 }} gutterBottom>
                    {formatAddress(invoiceData?.Address)} ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ : {formatPhoneNumber(invoiceData?.Phone)}</Typography>
                  <Typography variant="subtitle1" gutterBottom>‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ‡∏≠‡∏≤‡∏Å‡∏£ : {formatTaxID(invoiceData?.CardID)}</Typography>
                </React.Fragment>
              )
            }
          </Grid>
          <Grid item xs={3} textAlign="right">
            <Typography variant="subtitle1" sx={{ marginRight: 2 }}>
              ‡πÉ‡∏ö‡∏ß‡∏≤‡∏á‡∏ö‡∏¥‡∏•/‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ
            </Typography>
          </Grid>
        </Grid>
        {invoiceData && (
          <Grid container spacing={2} marginTop={2} sx={{ px: 2 }}>
            {/* ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó */}
            <Grid item xs={10} sx={{ border: "2px solid black", height: "140px" }}>
              <Typography variant="subtitle2" sx={{ marginTop: 1 }}><b>‡∏£‡∏´‡∏±‡∏™:</b> </Typography>
              <Typography variant="subtitle2"><b>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó:</b> {invoiceData?.Company}</Typography>
              <Typography variant="subtitle2"><b>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:</b> {formatAddress(invoiceData?.Address)}</Typography>
              <Typography variant="subtitle2"><b>‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ‡∏≠‡∏≤‡∏Å‡∏£:</b> {formatTaxID(invoiceData?.CardID)}</Typography>
            </Grid>

            {/* ‡∏™‡πà‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ */}
            <Grid item xs={2}>
              <Grid container spacing={2}>
                <Grid item xs={12} sx={{ borderTop: "2px solid black", borderRight: "2px solid black", textAlign: "center", height: "30px" }}>
                  <Typography variant="subtitle2" sx={{ fontWeight: "bold", marginTop: -1.5 }} gutterBottom>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</Typography>
                </Grid>
                <Grid item xs={12} sx={{ borderTop: "2px solid black", borderRight: "2px solid black", textAlign: "center", height: "40px" }}>
                  <Typography variant="subtitle2" sx={{ marginTop: -1 }} gutterBottom>{ }</Typography>
                </Grid>
                <Grid item xs={12} sx={{ borderTop: "2px solid black", borderRight: "2px solid black", textAlign: "center", height: "30px" }}>
                  <Typography variant="subtitle2" sx={{ fontWeight: "bold", marginTop: -1.5 }} gutterBottom>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</Typography>
                </Grid>
                <Grid item xs={12} sx={{ borderTop: "2px solid black", borderRight: "2px solid black", textAlign: "center", borderBottom: "2px solid black", height: "40px" }}>
                  <Typography variant="subtitle2" sx={{ marginTop: -1 }} gutterBottom>DDDDD</Typography>
                </Grid>
              </Grid>
            </Grid>
            <Table size="small" sx={{ tableLayout: "fixed", "& .MuiTableCell-root": { padding: "5px" }, border: "2px solid black", marginTop: 3 }}>
              <TableHead>
                <TableRow sx={{ borderBottom: "2px solid black", height: "35px" }}>
                  <TableCell sx={{ textAlign: "center", borderLeft: "2px solid black", width: "80px" }} >
                    <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0, fontWeight: "bold" }} gutterBottom>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</Typography>
                  </TableCell>
                  <TableCell sx={{ textAlign: "center", borderLeft: "2px solid black" }} >
                    <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0, fontWeight: "bold" }} gutterBottom>‡∏ú‡∏π‡πâ‡∏Ç‡∏±‡∏ö/‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</Typography>
                  </TableCell>
                  <TableCell sx={{ textAlign: "center", borderLeft: "2px solid black", width: "60px" }} >
                    <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0, fontWeight: "bold" }} gutterBottom>‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô</Typography>
                  </TableCell>
                  <TableCell sx={{ textAlign: "center", borderLeft: "2px solid black", width: "80px" }} >
                    <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0, fontWeight: "bold" }} gutterBottom>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏¥‡∏ï‡∏£</Typography>
                  </TableCell>
                  <TableCell sx={{ textAlign: "center", borderLeft: "2px solid black", width: "60px" }} >
                    <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0, fontWeight: "bold" }} gutterBottom>‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å</Typography>
                  </TableCell>
                  <TableCell sx={{ textAlign: "center", borderLeft: "2px solid black", width: "100px" }} >
                    <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0, fontWeight: "bold" }} gutterBottom>‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô</Typography>
                  </TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {
                  invoiceData?.Report.map((row, index) => {
                    const key = `${row.Date} : ${row.Driver} : ${row.Registration}`;
                    const rowSpan = rowSpanMap[key] && !mergedCells[key] ? rowSpanMap[key] : 0;
                    if (rowSpan) {
                      mergedCells[key] = true;
                      displayIndex++;
                    }

                    return (
                      <TableRow sx={{ height: "30px" }}>
                        {rowSpan > 0 && (
                          <TableCell
                            rowSpan={rowSpan}
                            sx={{ textAlign: "center", height: '30px', width: "80px", verticalAlign: "middle" }}>
                              <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0 }} gutterBottom>{row.Date}</Typography>
                          </TableCell>
                        )}
                        {rowSpan > 0 && (
                          <TableCell
                            rowSpan={rowSpan}
                            sx={{ textAlign: "center", height: '30px', verticalAlign: "middle" }}
                          >
                              <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0 }} gutterBottom>{row.Driver} : {row.Registration}</Typography>
                          </TableCell>
                        )}
                        <TableCell sx={{ textAlign: "center", borderLeft: "2px solid black" }}>
                          <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0 }} gutterBottom>{row.ProductName}</Typography>
                        </TableCell>
                        <TableCell sx={{ textAlign: "center", borderLeft: "2px solid black" }}>
                          <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0 }} gutterBottom>{new Intl.NumberFormat("en-US").format(row.Volume)}</Typography>
                        </TableCell>
                        <TableCell sx={{ textAlign: "center", borderLeft: "2px solid black" }}>
                          <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0 }} gutterBottom>{new Intl.NumberFormat("en-US").format(row.Rate)}</Typography>
                        </TableCell>
                        <TableCell sx={{ textAlign: "center", borderLeft: "2px solid black" }}>
                          <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0 }} gutterBottom>{new Intl.NumberFormat("en-US").format(row.Volume * row.Rate)}</Typography>
                        </TableCell>
                      </TableRow>
                    )
                  })
                }
                <TableRow sx={{ borderBottom: "2px solid black", borderTop: "2px solid black", height: "25px" }}>
                  <TableCell sx={{ textAlign: "center", borderLeft: "2px solid black" }} colSpan={3}>
                    <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0, fontWeight: "bold" }} gutterBottom>‡∏£‡∏ß‡∏°</Typography>
                  </TableCell>
                  <TableCell sx={{ textAlign: "center", borderLeft: "2px solid black" }} >
                    <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0, fontWeight: "bold" }} gutterBottom>
                      {new Intl.NumberFormat("en-US").format(invoiceData?.Total.totalVolume)}
                    </Typography>
                  </TableCell>
                  <TableCell sx={{ textAlign: "center", borderLeft: "2px solid black" }} colSpan={2}>
                    <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0, fontWeight: "bold" }} gutterBottom>
                      {new Intl.NumberFormat("en-US").format(invoiceData?.Total.totalAmount)}
                    </Typography>
                  </TableCell>
                </TableRow>
                <TableRow sx={{ height: "25px" }}>
                  <TableCell sx={{ textAlign: "center", borderLeft: "2px solid black" }} colSpan={3} rowSpan={2}>
                    <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0, fontWeight: "bold" }} gutterBottom>‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞</Typography>
                  </TableCell>
                  <TableCell sx={{ textAlign: "center", borderLeft: "2px solid black", borderBottom: "2px solid black" }} >
                    <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0, fontWeight: "bold" }} gutterBottom>
                      ‡∏´‡∏±‡∏Å ‡∏ì ‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢
                    </Typography>
                  </TableCell>
                  <TableCell sx={{ textAlign: "center", borderLeft: "2px solid black", borderBottom: "2px solid black" }} colSpan={2}>
                    <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0, fontWeight: "bold" }} gutterBottom>
                      {new Intl.NumberFormat("en-US").format(invoiceData?.Total.totalTax)}
                    </Typography>
                  </TableCell>
                </TableRow>
                <TableRow sx={{ height: "25px" }}>
                  <TableCell sx={{ textAlign: "center", borderLeft: "2px solid black" }}>
                    <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0, fontWeight: "bold" }} gutterBottom>
                      ‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞
                    </Typography>
                  </TableCell>
                  <TableCell sx={{ textAlign: "center", borderLeft: "2px solid black" }} colSpan={2}>
                    <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0, fontWeight: "bold" }} gutterBottom>
                      {new Intl.NumberFormat("en-US").format(invoiceData?.Total.totalPayment)}
                    </Typography>
                  </TableCell>
                </TableRow>
                <TableRow sx={{ borderBottom: "2px solid black", borderTop: "2px solid black", height: "25px" }}>
                  <TableCell sx={{ textAlign: "center", borderLeft: "2px solid black" }} colSpan={6}>
                    <Typography variant="subtitle2" sx={{ lineHeight: 1, margin: 0, fontWeight: "bold" }} gutterBottom>
                      {numberToThaiText(invoiceData?.Total.totalPayment)}
                    </Typography>
                  </TableCell>
                </TableRow>
              </TableBody>
            </Table>
          </Grid>
        )}
      </div>
      <div style={{ textAlign: "center", marginTop: "20px" }}>
        <Button variant="contained" onClick={handleDownloadImage}>
          ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        </Button>
      </div>
    </React.Fragment>
  );
};

export default PrintReport;
