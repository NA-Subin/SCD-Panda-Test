import React, { useContext, useEffect, useState } from "react";
import {
    Badge,
    Box,
    Button,
    Checkbox,
    Chip,
    Container,
    Dialog,
    DialogActions,
    DialogContent,
    DialogTitle,
    Divider,
    FormControlLabel,
    FormGroup,
    Grid,
    IconButton,
    InputAdornment,
    InputBase,
    MenuItem,
    Paper,
    Popover,
    Select,
    Slide,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    TextField,
    Tooltip,
    Typography,
} from "@mui/material";
import { DatePicker, LocalizationProvider } from "@mui/x-date-pickers";
import dayjs from "dayjs";
import "dayjs/locale/th";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { database } from "../../../server/firebase";
import UpdateGasStations from "./UpdateGasStations";

const GasStationsDetail = (props) => {
    const { gasStation } = props;
    const [open, setOpen] = useState("‡πÅ‡∏°‡πà‡πÇ‡∏à‡πâ");
    const [openTab, setOpenTab] = React.useState(true);
    const [checkStock, setCheckStock] = useState("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");

    const toggleDrawer = (newOpen) => () => {
        setOpenTab(newOpen);
    };

    const handleClickOpen = () => {
        setOpen(true);
    };

    const handleClose = () => {
        setOpen(false);
    };

    const [selectedDate, setSelectedDate] = useState(dayjs(new Date()));
    const handleDateChange = (newValue) => {
        if (newValue) {
            const formattedDate = dayjs(newValue); // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï
            setSelectedDate(formattedDate);
        }
    };

    const [downHole, setDownHole] = React.useState([]);
    const total = downHole.reduce((sum, value) => sum + value.DownHole, 0); // ‡∏ö‡∏ß‡∏Å‡∏Ñ‡πà‡∏≤ DownHole ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å item ‡πÉ‡∏ô array

    const [volume, setVolume] = React.useState(total);

    console.log(downHole); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• downHole ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö
    console.log("‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏° " + total); // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    console.log(volume);

    const [values, setValues] = React.useState([]);
    const [isDataUpdated, setIsDataUpdated] = useState(false); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á

    console.log("Check : ", isDataUpdated);

    const handleSendBack = (newData) => {
        setValues(prevValues => {
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ index ‡∏Ç‡∏≠‡∏á Stock ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            const stockIndex = prevValues.findIndex(item => (item.Stock === newData.Stock) && (item.GasStaionName === newData.GasStaionName));
    
            if (stockIndex !== -1) {
                // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Stock ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                let updatedValues = [...prevValues]; // Clone ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
                let existingReport = updatedValues[stockIndex].Report;
    
                // ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å newData
                let newDateKey = Object.keys(newData.Report)[0]; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà
                let newReportData = newData.Report[newDateKey]; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô
    
                if (existingReport[newDateKey]) {
                    // ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô
                    existingReport[newDateKey] = { ...newReportData };
                } else {
                    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
                    existingReport[newDateKey] = newReportData;
                }

                console.log("‚úÖ Updated Values before return:", updatedValues); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô return
    
                return updatedValues;
            } else {
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Stock ‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Array
                return [...prevValues, newData];
            }
        });
    };

    useEffect(() => {
        console.log("üî• Updated Values:", values);
    }, [values]); // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà `values` ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    

    const [windowWidth, setWindowWidth] = useState(window.innerWidth);

    // ‡πÉ‡∏ä‡πâ useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    useEffect(() => {
        const handleResize = () => {
            setWindowWidth(window.innerWidth); // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        };

        window.addEventListener('resize', handleResize); // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener

        // ‡∏•‡∏ö event listener ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏•‡∏≤‡∏¢
        return () => {
            window.removeEventListener('resize', handleResize);
        };
    }, []);

    const [name, setName] = React.useState("");
    const [no, setNo] = React.useState("");
    const [road, setRoad] = React.useState("");
    const [subDistrict, setSubDistrict] = React.useState("");
    const [district, setDistrict] = React.useState("");
    const [province, setProvince] = React.useState("");
    const [zipCode, setZipCode] = React.useState("");
    const [lat, setLat] = React.useState("");
    const [lng, setLng] = React.useState("");

    const [gasStationOil, setGasStationsOil] = useState([]);
    const [stock, setStock] = React.useState([]);
    const [stocks, setStocks] = React.useState([]);
    const getStockOil = async () => {
        const gasStation = [];
        database.ref("/depot/gasStations").on("value", (snapshot) => {
            const datas = snapshot.val();
            const dataList = [];
            for (let id in datas) {
                dataList.push({ id, ...datas[id] });
                gasStation.push({ id, ...datas[id] });
            }
            setGasStationsOil(dataList);
        });

        database.ref("/depot/stock").on("value", (snapshot) => {
            const datas = snapshot.val();
            const dataList = [];
            for (let id in datas) {
                dataList.push({ id, ...datas[id] });
            }
            setStocks(dataList);

            const matchedStocks = dataList.filter((stock) =>
                gasStation.some((station) => station.Stock === stock.Name)
            );
            setStock(matchedStocks);
        });
    };

    useEffect(() => {
        getStockOil();
    }, []);

    const matchCount = stocks.reduce((count, stock) => {
        return count + gasStationOil.filter((row) => stock.Name === row.Stock && row.Stock === open).length;
    }, 0);

    console.log("‡∏õ‡∏±‡πâ‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" + matchCount);

    console.log(" Gas Station Oil : ",gasStationOil);
    console.log(" Gas Station Oil edit : ",values);

    // ‡πÉ‡∏ä‡πâ useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ values ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï isDataUpdated
    React.useEffect(() => {
        if (!values.length || !gasStationOil) return;
    
        let date = dayjs(selectedDate).format("DD-MM-YYYY");
    
        // üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏≤‡∏Å values ‡πÅ‡∏•‡∏∞ gasStationOil ‡∏î‡πâ‡∏ß‡∏¢ optional chaining
        let reportData = values.find(item => item.Stock === checkStock && item.Report?.[date])?.Report[date] || null;
        let gasStationData = gasStationOil.find(item => item.Stock === checkStock && item.Report?.[date])?.Report[date] || null;
    
        console.log("üìÖ Date:", date);
        console.log("üì¶ reportData ‡∏à‡∏≤‡∏Å values:", reportData);
        console.log("üõ¢Ô∏è gasStationData ‡∏à‡∏≤‡∏Å gasStationOil:", gasStationData);
    
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô reportData ‡∏´‡∏£‡∏∑‡∏≠ gasStationData ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ isDataUpdated ‡πÄ‡∏õ‡πá‡∏ô false
        if (!reportData || !gasStationData) {
            setIsDataUpdated(false);
            return;
        }
    
        // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÉ‡∏ô reportData ‡πÅ‡∏•‡∏∞ gasStationData
        const isUpdated = Object.keys(reportData).some(index => {
            const reportItem = reportData[index];
            const gasStationItem = gasStationData[index];
    
            if (reportItem) {
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                return (
                    reportItem.Period !== gasStationItem.Period
                );
            }
    
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô gasStationData ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
            return false;
        });
    
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ isDataUpdated: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô true
        setIsDataUpdated(isUpdated);
    
        console.log("üîÑ ‡∏Ñ‡πà‡∏≤ isDataUpdated:", isUpdated);
    }, [values, gasStationOil, selectedDate]);
    
    
    
    
    // gasStation: {
    //     0: {
    //         id: 1,
    //         Name: "‡πÅ‡∏°‡πà‡πÇ‡∏à‡πâ-‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏™‡πÇ‡∏õ‡∏£",
    //         StockName: "‡πÅ‡∏°‡πà‡πÇ‡∏à‡πâ",
    //         Report: {
    //             12-03-2025: {
    //                 0: {
    //                     ProductName: "G95",
    //                         DownHole: 2000
    //                 },
    //                 1: {
    //                     ProductName: "G91",
    //                         DownHole: 3000
    //                 },
    //                 2: {
    //                     ProductName: "B7",
    //                         DownHole: 5000
    //                 }
    //             },
    //             13-03-2025: {
    //                 0: {
    //                     ProductName: "G95",
    //                         DownHole: 3000
    //                 },
    //                 1: {
    //                     ProductName: "G91",
    //                         DownHole: 5000
    //                 },
    //                 2: {
    //                     ProductName: "B7",
    //                         DownHole: 6000
    //                 }
    //             },
    //         }
    //     },
    //     2: {
    //         id: 2,
    //         Name: "‡∏™‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á-‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏™‡πÇ‡∏õ‡∏£",
    //         StockName: "‡∏™‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
    //         Report: {
    //             12-03-2025: {
    //                 0: {
    //                     ProductName: "G95",
    //                         DownHole: 3000
    //                 },
    //                 1: {
    //                     ProductName: "B7",
    //                         DownHole: 3000
    //                 }
    //             },
    //             13-03-2025: {
    //                 0: {
    //                     ProductName: "G95",
    //                         DownHole: 2000
    //                 },
    //                 1: {
    //                     ProductName: "B7",
    //                         DownHole: 4000
    //                 }
    //             },
    //         }
    //     },
    //     3: {
    //         id: 3,
    //         Name: "‡πÅ‡∏°‡πà‡πÇ‡∏à‡πâ-‡∏ô‡∏≤‡∏°‡∏≠‡∏™",
    //         StockName: "‡πÅ‡∏°‡πà‡πÇ‡∏à‡πâ",
    //         Report: {
    //             12-03-2025: {
    //                 0: {
    //                     ProductName: "G95",
    //                         DownHole: 3000
    //                 },
    //                 1: {
    //                     ProductName: "G91",
    //                         DownHole: 3000
    //                 },
    //                 2: {
    //                     ProductName: "B7",
    //                         DownHole: 2000
    //                 }
    //             },
    //             13-03-2025: {
    //                 0: {
    //                     ProductName: "G95",
    //                         DownHole: 2000
    //                 },
    //                 1: {
    //                     ProductName: "G91",
    //                         DownHole: 2000
    //                 },
    //                 2: {
    //                     ProductName: "B7",
    //                         DownHole: 4000
    //                 }
    //             },
    //         }
    //     }
    // }

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô StockName: "‡πÅ‡∏°‡πà‡πÇ‡∏à‡πâ" ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 12-03-2025  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô downHole ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ
    // downHole :{
    //     G95: 3000+2000
    //     G91: 3000+3000
    //     B7: 2000+5000
    // }

    return (
        <React.Fragment>
            <Box
                sx={{
                    p: 1,
                    // height: "70vh"
                }}
            >
                <Grid container spacing={2}>
                    <Grid item xs={12} sm={6} lg={4}>
                        <Paper
                            component="form"
                            sx={{
                                width: "100%", // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Paper
                                height: "40px",
                                display: "flex",
                                alignItems: "center",
                                justifyContent: "center"
                            }}
                        >
                            <LocalizationProvider dateAdapter={AdapterDayjs}>
                                <DatePicker
                                    openTo="day"
                                    views={["year", "month", "day"]}
                                    value={dayjs(selectedDate)} // ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô dayjs object
                                    format="DD/MM/YYYY"
                                    onChange={handleDateChange}
                                    slotProps={{
                                        textField: {
                                            size: "small",
                                            fullWidth: true,
                                            InputProps: {
                                                startAdornment: (
                                                    <InputAdornment position="start" sx={{ marginRight: 2 }}>
                                                        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà :
                                                    </InputAdornment>
                                                ),
                                                sx: {
                                                    fontSize: "16px", // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Input
                                                    height: "40px",  // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á Input
                                                    padding: "10px", // Padding ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Input
                                                    fontWeight: "bold",
                                                },
                                            },
                                        },
                                    }}
                                />
                            </LocalizationProvider>
                        </Paper>
                    </Grid>
                    <Grid item sm={6} lg={8}>
                    <FormGroup row>
    <FormControlLabel
        control={
            <Checkbox
                checked={checkStock === "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"}
                onChange={() => setCheckStock("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")}
                disabled={isDataUpdated} // üîπ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
            />
        }
        label="‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
    />
    {stocks.map((row) => (
        <FormControlLabel
            key={row.Name}
            control={
                <Checkbox
                    checked={checkStock === row.Name}
                    onChange={() => setCheckStock(row.Name)}
                    disabled={isDataUpdated} // üîπ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
                />
            }
            label={row.Name}
        />
    ))}
</FormGroup>
{isDataUpdated && (
    <Typography color="error" sx={{ mt: 1 }}>
        ‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤
    </Typography>
)}
                    </Grid>
                    <Grid item xs={12}>
                        {
                            checkStock === "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" ?
                            stocks.map((stock, index) => {
                                let downHole = {}; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á DownHole
                                let matchCount = 0; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô match
                                let day = dayjs(selectedDate).format("DD-MM-YYYY");

                                console.log(`1.Final DownHole for Stock: ${stock.Name}`, downHole);
                                console.log("Show Values : ",values);

                                values.forEach((row) => {
                                    if (stock.Name === row.Stock) {  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠ Stock ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                                        const yesterdayDate = dayjs(selectedDate).subtract(1, "day").format("DD-MM-YYYY");
                                        const yesterdayData = row?.Report?.[yesterdayDate];

                                        let currentReport = row.Report?.[day]; // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                                        if (currentReport) {
                                            Object.values(currentReport).forEach(reportItem => {
                                                // const yesterdayEntry = Object.values(yesterdayData || {}).find(entry => entry?.ProductName === reportItem?.ProductName) || { OilBalance: 0 };
                                                
                                                let productName = reportItem?.ProductName || "";
                                                
                                                // let volumeValue = Number(yesterdayEntry?.Difference) || Number(yesterdayEntry?.OilBalance) || 0;
                                                // let deliveredValue = Number(reportItem?.Delivered) || 0;
                                                // let pending1Value = Number(reportItem?.Pending1) || 0;
                                                // let pending2Value = Number(reportItem?.Pending2) || 0;

                                                // console.log("Volume : ",volumeValue);
                                                // console.log("DeliveredValue : ",deliveredValue);
                                                // console.log("Pending1 : ",pending1Value);
                                                // console.log("Pending2 : ",pending2Value);

                                                // let total = (volumeValue+(deliveredValue+pending1Value+pending2Value));

                                                console.log("DownHole : ",parseFloat(reportItem?.DownHole));
                
                                                if (!downHole[productName]) {
                                                    downHole[productName] = 0;
                                                }
                                                downHole[productName] += parseFloat(reportItem?.DownHole);
                                            });
                                        }
                                    }
                                });
                
                                console.log(`2.Final DownHole for Stock: ${stock.Name}`, downHole);
                
                                return (
                                    <Paper
                                        sx={{
                                            p: 2,
                                            marginBottom: 2,
                                            border: '2px solid lightgray',
                                            borderRadius: 3,
                                            boxShadow: 1,
                                            width: windowWidth <= 900 && windowWidth > 600 ? (windowWidth - 125) : windowWidth <= 600 ? (windowWidth - 65) : (windowWidth - 275),
                                            overflowY: 'auto'
                                        }}
                                        key={stock.id || index}
                                    >
                                        {gasStationOil.map((row) => {
                                            if (stock.Name === row.Stock) { // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö StockName
                                                matchCount++; 
                                                return (
                                                    <UpdateGasStations
                                                        key={row.id}
                                                        gasStation={row}
                                                        gasStationOil={gasStationOil}
                                                        selectedDate={selectedDate}
                                                        count={matchCount}
                                                        checkStock={checkStock}
                                                        Squeeze={matchCount === 1 ? 800 : 0} // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Squeeze
                                                        currentReport={row.Report} // ‡∏™‡πà‡∏á Report ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô
                                                        valueDownHole={downHole} // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß
                                                        onSendBack={handleSendBack}
                                                    />
                                                );
                                            }
                                            return null;
                                        })}
                                    </Paper>
                                );
                            })
                                :
                                <Paper
                                    sx={{
                                        p: 2,
                                        marginBottom: 2,
                                        border: '2px solid lightgray', // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡πâ‡∏°
                                        borderRadius: 3, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏ô (‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ px)
                                        boxShadow: 1, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
                                        width: windowWidth <= 900 && windowWidth > 600 ? (windowWidth - 125) : windowWidth <= 600 ? (windowWidth - 65) : (windowWidth - 275), overflowY: 'auto'
                                    }}
                                >
                                    {(() => {
                                        let downHole = {}; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á DownHole
                                        let matchCount = 0; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô match
                                        let day = dayjs(selectedDate).format("DD-MM-YYYY");
                                        console.log("Show Values : ",values);

                                        values.forEach((row) => {
                                            if (checkStock === row.Stock) {  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠ Stock ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                                                const yesterdayDate = dayjs(selectedDate).subtract(1, "day").format("DD-MM-YYYY");
                                                const yesterdayData = row?.Report?.[yesterdayDate];
        
                                                let currentReport = row.Report?.[day]; // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                                                if (currentReport) {
                                                    Object.values(currentReport).forEach(reportItem => {
                                                        // const yesterdayEntry = Object.values(yesterdayData || {}).find(entry => entry?.ProductName === reportItem?.ProductName) || { OilBalance: 0 };
                                                        
                                                        let productName = reportItem?.ProductName || "";
                                                        // let volumeValue = Number(yesterdayEntry?.Difference) || Number(yesterdayEntry?.OilBalance) || 0;
                                                        // let deliveredValue = Number(reportItem?.Delivered) || 0;
                                                        // let pending1Value = Number(reportItem?.Pending1) || 0;
                                                        // let pending2Value = Number(reportItem?.Pending2) || 0;
        
                                                        // let total = (volumeValue+(deliveredValue+pending1Value+pending2Value));
        
                                                        // console.log("Total : ",total);
                        
                                                        // if (!downHole[productName]) {
                                                        //     downHole[productName] = 0;
                                                        // }
                                                        // downHole[productName] += total;
                                                        console.log("DownHole : ",parseFloat(reportItem?.DownHole));
                
                                                        if (!downHole[productName]) {
                                                            downHole[productName] = 0;
                                                        }
                                                        downHole[productName] += parseFloat(reportItem?.DownHole);
                                                    });
                                                }
                                            }
                                        });

                                        console.log(`2.Final DownHole for Stock: ${stock.Name}`, downHole);

                                        return gasStationOil.map((row, rowIndex) => {
                                            if (checkStock === row.Stock) {
                                                matchCount++; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á
                                                console.log(`Stock : ${checkStock}, row.Stock : ${row.Stock}`);
                                                return (
                                                    <UpdateGasStations
                                                        key={row.id}
                                                        gasStation={row}
                                                        gasStationOil={gasStationOil}
                                                        selectedDate={selectedDate}
                                                        count={matchCount}
                                                        checkStock={checkStock}
                                                        Squeeze={matchCount === 1 ? 800 : 0} // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Squeeze
                                                        currentReport={row.Report} // ‡∏™‡πà‡∏á Report ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô
                                                        valueDownHole={downHole} // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß
                                                        onSendBack={handleSendBack}
                                                    />
                                                );
                                            }
                                            return null; // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏ñ‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á
                                        })
                                    }
                                    )()}
                                </Paper>
                        }
                    </Grid>
                </Grid>
            </Box>
            {/* <Grid container spacing={3} marginTop={1} marginLeft={-7}>
                <Grid item xs={openTab ? 1.5 : 0.7}>
                    <Button
                        variant="text"
                        color="inherit"
                        size="small"
                        fullWidth
                        sx={{ marginBottom: 1.3, fontWeight: "bold", marginBottom: 1, marginTop: -3 }}
                        onClick={toggleDrawer(!openTab)}
                    >

                        <Grid container spacing={2}>
                            {
                                openTab ?
                                    <Grid item xs={12} textAlign="center">
                                        <Typography variant="subtitle1" fontWeight="bold" gutterBottom>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</Typography>
                                    </Grid>
                                    :
                                    ""
                            }
                            <Grid item xs={12} marginTop={openTab ? -6 : 0} textAlign="right">
                                <ArrowCircleLeftIcon />
                            </Grid>
                        </Grid>
                    </Button>
                    {
                        stock.map((row) => (
                            <Button
                                variant="contained"
                                color={row.Name === open ? "info" : "inherit"}
                                size="small"
                                fullWidth
                                sx={{ marginBottom: 1.3 }}
                                onClick={(e) => setOpen(row.Name)}
                            >
                                {
                                    openTab ? row.Name : ("PS" + Number(row.id))
                                }
                            </Button>
                        ))
                    }

                </Grid>
                <Grid item xs={openTab ? 10.5 : 11.3}>
                    <Paper
                        sx={{
                            p: 2,
                            // height: "70vh"
                        }}
                    >
                        {
                            stocks.map((stock) => (
                                gasStationOil.map((row) => (
                                    stock.Name === row.Stock && row.Stock === open && (
                                    <UpdateGasStations key={row.id} gasStation={row} gasStationOil={gasStationOil}
                                    onSendBack={handleSendBack}
                                    />
                                    )
                                ))
                            ))
                        }
                    </Paper>
                </Grid>
            </Grid> */}

        </React.Fragment>

    );
};

export default GasStationsDetail;
